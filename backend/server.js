const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const dotenv = require('dotenv');
const path = require('path');
const http = require('http');
const { Server } = require('socket.io');

dotenv.config();

// === –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB ===
mongoose.connect(process.env.MONGO_URL)
  .then(() => console.log('üü¢ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ MongoDB'))
  .catch((err) => console.error('üî¥ –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB:', err));

// === –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Express —Ç–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞ ===
const app = express();
const server = http.createServer(app);

// === –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Socket.IO ===
const io = new Server(server, {
  cors: {
    origin: "http://localhost:5173",  // –ó–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –∞–¥—Ä–µ—Å—É
    methods: ['GET', 'POST', 'PUT', 'DELETE'],
    allowedHeaders: ['Content-Type', 'Authorization'],
  }
});

// === –ö–æ–ª–µ–∫—Ü—ñ—è –±–ª–æ–∫—É–≤–∞–Ω—å –º—ñ—Å—Ü—å ===
const seatLocks = new Map();  // Map<sessionId, { "row-seat": { socketId, timestamp } }>

// === –õ–æ–≥—ñ–∫–∞ Socket.IO ===
io.on('connection', (socket) => {
  console.log(`üü¢ –ö–ª—ñ—î–Ω—Ç –ø—ñ–¥–∫–ª—é—á–∏–≤—Å—è: ${socket.id}`);

  socket.on('join-session', async (sessionId) => {
    console.log(`‚û°Ô∏è –ö–ª—ñ—î–Ω—Ç ${socket.id} –ø—Ä–∏—î–¥–Ω—É—î—Ç—å—Å—è –¥–æ —Å–µ–∞–Ω—Å—É: ${sessionId}`);
    try {
      const Session = mongoose.model('Session');
      const session = await Session.findById(sessionId);
      if (!session) {
        console.log(`‚ùå –°–µ–∞–Ω—Å ${sessionId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞ ${socket.id}`);
        socket.emit('error', '–°–µ–∞–Ω—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        return;
      }

      // –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö –±–ª–æ–∫—É–≤–∞–Ω—å (>5 —Ö–≤)
      let locks = seatLocks.get(sessionId) || {};
      const now = Date.now();
      Object.keys(locks).forEach(seatKey => {
        if (now - locks[seatKey].timestamp > 300000) { // 5 —Ö–≤–∏–ª–∏–Ω
          console.log(`‚è≥ –ó–≤—ñ–ª—å–Ω–µ–Ω–Ω—è –º—ñ—Å—Ü—è ${seatKey} —É —Å–µ–∞–Ω—Å—ñ ${sessionId} (–∑–∞—Å—Ç–∞—Ä—ñ–ª–µ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è)`);
          delete locks[seatKey];
          io.to(sessionId).emit('seat-released', { 
            row: Number(seatKey.split('-')[0]), 
            seat: Number(seatKey.split('-')[1]) 
          });
        }
      });
      seatLocks.set(sessionId, locks);

      socket.join(sessionId);
      console.log(`‚úÖ –ö–ª—ñ—î–Ω—Ç ${socket.id} –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –¥–æ –∫—ñ–º–Ω–∞—Ç–∏ —Å–µ–∞–Ω—Å—É ${sessionId}`);

      // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å—Ç–∞–Ω—É –º—ñ—Å—Ü—å —Ç–∞ –±–ª–æ–∫—É–≤–∞–Ω—å
      socket.emit('seats-init', {
        seats: session.seats,
        locks: Object.keys(locks).reduce((acc, key) => {
          if (locks[key].socketId !== socket.id) acc[key] = true;
          return acc;
        }, {})
      });
      console.log(`üì§ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω –º—ñ—Å—Ü—å –∫–ª—ñ—î–Ω—Ç—É ${socket.id}`);

    } catch (err) {
      console.error('üî¥ –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–µ–∞–Ω—Å—É:', err);
      socket.emit('error', '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
    }
  });

  socket.on('toggle-seat', async ({ sessionId, row, seat }) => {
    console.log(`üîî toggle-seat –æ—Ç—Ä–∏–º–∞–Ω–æ: sessionId=${sessionId}, row=${row}, seat=${seat}, socketId=${socket.id}`);
    const seatKey = `${row}-${seat}`;
    let locks = seatLocks.get(sessionId) || {};

    try {
      const Session = mongoose.model('Session');
      const session = await Session.findById(sessionId);

      if (!session) {
        console.log('‚ùå –°–µ–∞–Ω—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É toggle-seat');
        socket.emit('seat-error', '–°–µ–∞–Ω—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        return;
      }

      if (session.seats[row][seat].isOccupied) {
        console.log(`üö´ –ú—ñ—Å—Ü–µ ${seatKey} –≤–∂–µ –∑–∞–π–Ω—è—Ç–µ —É —Å–µ–∞–Ω—Å—ñ ${sessionId}`);
        socket.emit('seat-error', '–ú—ñ—Å—Ü–µ –≤–∂–µ –∑–∞–π–Ω—è—Ç–µ');
        return;
      }

      // –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –±–ª–æ–∫—É–≤–∞–Ω—å
      const now = Date.now();
      Object.keys(locks).forEach(key => {
        if (now - locks[key].timestamp > 300000) { // 5 —Ö–≤–∏–ª–∏–Ω
          delete locks[key];
          io.to(sessionId).emit('seat-unlocked', {
            row: Number(key.split('-')[0]),
            seat: Number(key.split('-')[1])
          });
        }
      });

      if (locks[seatKey]) {
        if (locks[seatKey].socketId === socket.id) {
          // –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ —Å–≤–æ—î –º—ñ—Å—Ü–µ
          delete locks[seatKey];
          io.to(sessionId).except(socket.id).emit('seat-unlocked', { row, seat });
          socket.emit('seat-unlocked', { row, seat });
          console.log(`üîì –ö–ª—ñ—î–Ω—Ç ${socket.id} —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–≤ —Å–≤–æ—î –º—ñ—Å—Ü–µ ${seatKey}`);
        } else {
          // –ú—ñ—Å—Ü–µ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–µ —ñ–Ω—à–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º
          console.log(`üö´ –ú—ñ—Å—Ü–µ ${seatKey} –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–µ —ñ–Ω—à–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º (${locks[seatKey].socketId})`);
          socket.emit('seat-error', '–ú—ñ—Å—Ü–µ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–µ —ñ–Ω—à–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º');
          return;
        }
      } else {
        // –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –º—ñ—Å—Ü–µ
        locks[seatKey] = { socketId: socket.id, timestamp: now };
        io.to(sessionId).except(socket.id).emit('seat-locked', { row, seat });
        socket.emit('seat-locked', { row, seat });
        console.log(`üîí –ö–ª—ñ—î–Ω—Ç ${socket.id} –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –º—ñ—Å—Ü–µ ${seatKey}`);
      }

      seatLocks.set(sessionId, locks);

    } catch (err) {
      console.error('üî¥ –ü–æ–º–∏–ª–∫–∞ toggle-seat:', err);
      socket.emit('seat-error', '–ü–æ–º–∏–ª–∫–∞ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –º—ñ—Å—Ü—è');
    }
  });

  socket.on('confirm-payment', async ({ sessionId, seats, paymentId }) => {
    console.log(`üí≥ –ö–ª—ñ—î–Ω—Ç ${socket.id} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î –æ–ø–ª–∞—Ç—É ${paymentId} –¥–ª—è —Å–µ–∞–Ω—Å—É ${sessionId} —Ç–∞ –º—ñ—Å—Ü—å:`, seats);
    try {
      const Session = mongoose.model('Session');
      const session = await Session.findById(sessionId);

      if (!session) {
        console.log(`‚ùå –°–µ–∞–Ω—Å ${sessionId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞ ${socket.id} –ø—Ä–∏ –æ–ø–ª–∞—Ç—ñ`);
        socket.emit('payment-error', '–°–µ–∞–Ω—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        return;
      }

      // –û–Ω–æ–≤–ª—é—î–º–æ –º—ñ—Å—Ü—è —è–∫ –∑–∞–π–Ω—è—Ç—ñ
      const updatedSeats = session.seats.map((rowArray, rowIdx) =>
        rowArray.map((seatObj, seatIdx) => {
          const isBooked = seats.some(s => s.row === rowIdx && s.seat === seatIdx);
          return isBooked ? { ...seatObj, isOccupied: true } : seatObj;
        })
      );

      await Session.findByIdAndUpdate(sessionId, { seats: updatedSeats }, { new: true });

      // –û—á–∏—â–µ–Ω–Ω—è –±–ª–æ–∫—É–≤–∞–Ω—å –¥–ª—è –æ–ø–ª–∞—á–µ–Ω–∏—Ö –º—ñ—Å—Ü—å
      let locks = seatLocks.get(sessionId) || {};
      seats.forEach(({ row, seat }) => {
        const key = `${row}-${seat}`;
        if (locks[key]) {
          delete locks[key];
          console.log(`üÜì –ó–≤—ñ–ª—å–Ω–µ–Ω–æ –º—ñ—Å—Ü–µ ${key} –ø—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏`);
        }
      });
      seatLocks.set(sessionId, locks);

      // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –∫–ª—ñ—î–Ω—Ç—ñ–≤
      io.to(sessionId).emit('seats-updated', updatedSeats);
      console.log(`üì¢ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –º—ñ—Å—Ü—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤—Å—ñ–º –∫–ª—ñ—î–Ω—Ç–∞–º —É —Å–µ–∞–Ω—Å—ñ ${sessionId}`);

      // –ù–ï –í–Ü–î–ö–õ–Æ–ß–ê–Ñ–ú–û –ö–õ–Ü–Ñ–ù–¢–ê, —â–æ–±–∏ –≤—ñ–Ω –º—ñ–≥ –ø—Ä–æ–¥–æ–≤–∂—É–≤–∞—Ç–∏ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏
      socket.emit('payment-success', updatedSeats);

    } catch (err) {
      console.error('üî¥ –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –º—ñ—Å—Ü—å:', err);
      socket.emit('payment-error', '–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏');
    }
  });

  socket.on('disconnect', () => {
    console.log(`‚ùå –ö–ª—ñ—î–Ω—Ç –≤—ñ–¥–∫–ª—é—á–∏–≤—Å—è: ${socket.id}. –ó–≤—ñ–ª—å–Ω–µ–Ω–Ω—è –±–ª–æ–∫—É–≤–∞–Ω—å...`);
    seatLocks.forEach((locks, sessionId) => {
      let changed = false;
      Object.keys(locks).forEach(seatKey => {
        if (locks[seatKey].socketId === socket.id) {
          delete locks[seatKey];
          const [row, seat] = seatKey.split('-').map(Number);
          io.to(sessionId).emit('seat-released', { row, seat });
          console.log(`üÜì –ó–≤—ñ–ª—å–Ω–µ–Ω–æ –º—ñ—Å—Ü–µ ${seatKey} —É —Å–µ–∞–Ω—Å—ñ ${sessionId} —á–µ—Ä–µ–∑ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞`);
          changed = true;
        }
      });
      if (changed) {
        seatLocks.set(sessionId, locks);
      }
    });
  });
});

// === Middleware ===
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// === API-–º–∞—Ä—à—Ä—É—Ç–∏ ===
app.use('/api/auth', require('./routes/auth'));
app.use('/api/movies', require('./routes/movies'));
app.use('/api/sessions', require('./routes/sessions'));
app.use('/api/bookings', require('./routes/bookings'));
app.use('/api/payments', require('./routes/payments'));
app.use('/api/tickets', require('./routes/tickets'));
app.use('/api/halls', require('./routes/halls'));
// === –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—Å—Ç–µ—Ä—ñ–≤ ===
app.use('/api/uploads', require('./routes/posters'));
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

// === –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–µ –æ—Ç–æ—á–µ–Ω–Ω—è ===
if (process.env.NODE_ENV === 'production') {
  app.use(express.static(path.join(__dirname, '../client/build')));
  app.get('*', (req, res) => {
    res.sendFile(path.resolve(__dirname, '../client/build/index.html'));
  });
}

// === –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ ===
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ 
    success: false,
    message: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
    error: process.env.NODE_ENV === 'development' ? err.message : null
  });
});

// === –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ===
const PORT = process.env.PORT || 5000;
server.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—ñ ${PORT}`);
});
